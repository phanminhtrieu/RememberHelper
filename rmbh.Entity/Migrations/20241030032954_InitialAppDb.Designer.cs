// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rmbh.Entity;

#nullable disable

namespace rmbh.Entity.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241030032954_InitialAppDb")]
    partial class InitialAppDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerClarifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerFootnote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("AnswerImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionClarifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionFootnote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("QuestionImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "JSX is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript.",
                            AnswerClarifier = "JSX gets compiled to JavaScript.",
                            AnswerFootnote = "JSX is not mandatory in React.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            DeckId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Question = "What is JSX?",
                            QuestionClarifier = "It's commonly used with React.",
                            QuestionFootnote = "JSX can be confused with HTML.",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Components are independent, reusable pieces of code that return a React element.",
                            AnswerClarifier = "Components can manage their own state.",
                            AnswerFootnote = "They enhance reusability.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            DeckId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Question = "What are components?",
                            QuestionClarifier = "They can be functional or class-based.",
                            QuestionFootnote = "Components can be nested within each other.",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Answer = "State is an object that holds data about the component's current situation.",
                            AnswerClarifier = "State updates trigger re-renders.",
                            AnswerFootnote = "State should be updated using setState.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            DeckId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Question = "What is state?",
                            QuestionClarifier = "State allows components to create dynamic and interactive applications.",
                            QuestionFootnote = "State is managed within the component.",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Props are inputs to React components that allow data to be passed down from parent to child.",
                            AnswerClarifier = "They enable component communication.",
                            AnswerFootnote = "Props do not change inside the component.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            DeckId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Question = "What is a prop?",
                            QuestionClarifier = "Props are read-only.",
                            QuestionFootnote = "Props can be any type of data.",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Lifecycle methods are hooks that allow you to run code at specific points in a component's life.",
                            AnswerClarifier = "Common methods include componentDidMount and componentWillUnmount.",
                            AnswerFootnote = "Hooks offer similar functionality in functional components.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            DeckId = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Question = "What is a lifecycle method?",
                            QuestionClarifier = "They include mounting, updating, and unmounting.",
                            QuestionFootnote = "Lifecycle methods are specific to class components.",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Answer = "ASP.NET Core is a cross-platform framework for building modern cloud-based web applications.",
                            AnswerClarifier = "ASP.NET Core is designed for high performance.",
                            AnswerFootnote = "ASP.NET Core can run on Windows, macOS, and Linux.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            DeckId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Question = "What is ASP.NET Core?",
                            QuestionClarifier = "It is an open-source framework.",
                            QuestionFootnote = "It supports microservices architecture.",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 7,
                            Answer = "MVC stands for Model-View-Controller, a pattern used to separate application logic from the user interface.",
                            AnswerClarifier = "MVC divides an application into three interconnected components.",
                            AnswerFootnote = "Controllers handle user input.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            DeckId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Question = "What is the MVC pattern?",
                            QuestionClarifier = "It helps in organizing code and making it maintainable.",
                            QuestionFootnote = "Models represent the data.",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 8,
                            Answer = "Entity Framework Core is an ORM (Object-Relational Mapper) for .NET applications.",
                            AnswerClarifier = "EF Core simplifies data access.",
                            AnswerFootnote = "EF Core can be used with various databases.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            DeckId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Question = "What is Entity Framework Core?",
                            QuestionClarifier = "It allows developers to work with a database using .NET objects.",
                            QuestionFootnote = "It supports LINQ queries.",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 9,
                            Answer = "Middleware is software that connects different applications or services.",
                            AnswerClarifier = "Middleware can perform operations on HTTP requests.",
                            AnswerFootnote = "Common middleware includes authentication and logging.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            DeckId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Question = "What is middleware?",
                            QuestionClarifier = "In ASP.NET Core, middleware are components that are assembled into an application pipeline.",
                            QuestionFootnote = "Middleware can be added in the Configure method.",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 10,
                            Answer = "Dependency injection is a technique for achieving Inversion of Control between classes and their dependencies.",
                            AnswerClarifier = "ASP.NET Core has built-in support for dependency injection.",
                            AnswerFootnote = "It reduces class dependencies.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            DeckId = 3,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Question = "What is dependency injection?",
                            QuestionClarifier = "It helps in making components more decoupled.",
                            QuestionFootnote = "It promotes testability.",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 11,
                            Answer = "Tailwind CSS is a utility-first CSS framework for rapid UI development.",
                            AnswerClarifier = "Tailwind promotes a different workflow compared to traditional CSS.",
                            AnswerFootnote = "Tailwind's utility classes help in avoiding CSS bloat.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            DeckId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Question = "What is Tailwind CSS?",
                            QuestionClarifier = "It enables developers to design directly in their markup.",
                            QuestionFootnote = "It is customizable through configuration.",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 12,
                            Answer = "You can install Tailwind CSS via npm, yarn, or by including a CDN in your HTML.",
                            AnswerClarifier = "Make sure to set up a build process for purging unused styles.",
                            AnswerFootnote = "A CDN link is available for quick setup.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            DeckId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Question = "How to install Tailwind CSS?",
                            QuestionClarifier = "Using npm is the most common method.",
                            QuestionFootnote = "Install Tailwind with npm by running `npm install tailwindcss`.",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 13,
                            Answer = "Utility classes are single-purpose classes that apply one specific style.",
                            AnswerClarifier = "Each utility class has a specific function.",
                            AnswerFootnote = "They can be combined to create complex designs.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            DeckId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Question = "What are utility classes?",
                            QuestionClarifier = "They help in creating designs without writing custom CSS.",
                            QuestionFootnote = "Utility classes are prefixed with relevant property names.",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 14,
                            Answer = "The configuration file allows customization of the default Tailwind styles.",
                            AnswerClarifier = "It is essential for theming.",
                            AnswerFootnote = "Configuration helps in optimizing the build.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            DeckId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Question = "What is the purpose of Tailwind's configuration file?",
                            QuestionClarifier = "You can define your own colors, fonts, and breakpoints.",
                            QuestionFootnote = "The file is usually named `tailwind.config.js`.",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 15,
                            Answer = "To purge unused styles, configure the `purge` option in the Tailwind config file.",
                            AnswerClarifier = "Purge CSS scans your templates for classes.",
                            AnswerFootnote = "Use the `NODE_ENV` variable to control the purge in production.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            DeckId = 5,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedUserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Question = "How to purge unused styles?",
                            QuestionClarifier = "This step reduces file size for production.",
                            QuestionFootnote = "Set up your purge options in `tailwind.config.js`.",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLearningDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Description = "ReactJS is a JavaScript library by Facebook for building interactive user interfaces with reusable components. Students will learn concepts like JSX and component lifecycle, enhancing their ability to create efficient applications.",
                            LastLearningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Title = "ReactJS",
                            Visibility = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Description = "ASP.NET Core MVC is a Microsoft framework that uses the Model-View-Controller (MVC) pattern to separate application logic from user interface. Students will learn to build APIs and manage data with Entity Framework Core while ensuring application security.",
                            LastLearningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Title = "ASP.NET Core MVC",
                            Visibility = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Description = "Tailwind CSS is a utility-first framework that allows for rapid and flexible UI design using utility classes. Students will discover how to integrate it into projects and customize layouts efficiently.",
                            LastLearningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Title = "TailwindCSS",
                            Visibility = 1
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("StudyDeckType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Decks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2178),
                            Description = "This deck covers the fundamental concepts of React, including components, props, and state management.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2179),
                            SortOrder = 1,
                            StudyDeckType = 2,
                            Title = "React Basics"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 1,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2181),
                            Description = "Explore advanced patterns in React such as Higher-Order Components, Render Props, and Context API.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2181),
                            SortOrder = 2,
                            StudyDeckType = 1,
                            Title = "Advanced React Patterns"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2182),
                            Description = "Learn the basics of ASP.NET Core, including routing, middleware, and dependency injection.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2183),
                            SortOrder = 1,
                            StudyDeckType = 2,
                            Title = "ASP.NET Core Fundamentals"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 2,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2184),
                            Description = "This deck focuses on creating RESTful APIs using ASP.NET Core MVC and Entity Framework.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2184),
                            SortOrder = 2,
                            StudyDeckType = 1,
                            Title = "Building REST APIs"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2185),
                            Description = "Discover the utility-first approach to CSS with TailwindCSS and how to get started with it.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2186),
                            SortOrder = 1,
                            StudyDeckType = 2,
                            Title = "Introduction to TailwindCSS"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 3,
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2187),
                            Description = "Learn advanced techniques in TailwindCSS for customizing designs and improving workflow.",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2187),
                            SortOrder = 2,
                            StudyDeckType = 1,
                            Title = "Advanced Tailwind Techniques"
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("701e1774-9993-44fe-b377-aae0f51e0231"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "trieu@gmail.com",
                            FirstName = "Phan",
                            LastName = "Minh Trieu",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("9c0de9d9-1022-419e-9828-e8c7cc6e77c7"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "van@gmail.com",
                            FirstName = "Nguyen",
                            LastName = "Ngoc Khanh Van",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("0a647a8e-eeaf-4d96-8263-566cb883c994"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "hoa@gmail.com",
                            FirstName = "Pham",
                            LastName = "Minh Hoa",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "duc@gmail.com",
                            FirstName = "Pham",
                            LastName = "Van Duc",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("b2e1073e-5c78-4bbf-9a23-0d3a799a4f81"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "vana@gmail.com",
                            FirstName = "Nguyen",
                            LastName = "Van A",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("d5c1b63d-cd34-47a6-9d18-9b0c5e457d2f"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "thib@gmail.com",
                            FirstName = "Tran",
                            LastName = "Thi B",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("9b12349d-16b4-43fc-945c-b1632f0bcbb1"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "tranv@gmail.com",
                            FirstName = "Tran",
                            LastName = "Van C",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("f12b876c-0e2d-4d39-b878-4d5b45e93557"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "lehoang@gmail.com",
                            FirstName = "Le",
                            LastName = "Hoang D",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("22c115dd-c912-4fb2-8d57-037d89e4b5e4"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "phamngoc@gmail.com",
                            FirstName = "Pham",
                            LastName = "Ngoc E",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("5e5a20e3-3a49-48fc-8e7a-14d476403e94"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "nguyenkim@gmail.com",
                            FirstName = "Nguyen",
                            LastName = "Kim F",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("ff127b02-7f94-4ebd-8d99-91e69f4ab6ba"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "truongtuan@gmail.com",
                            FirstName = "Truong",
                            LastName = "Tuan G",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "vominh@gmail.com",
                            FirstName = "Vo",
                            LastName = "Minh H",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("f8d170a5-02f7-4ff4-8c12-4eb83451fcd6"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "lamthanh@gmail.com",
                            FirstName = "Lam",
                            LastName = "Thanh I",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("7d3e98b2-8825-476e-b230-63a7d8d6500b"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "ngochai@gmail.com",
                            FirstName = "Ngo",
                            LastName = "Hai J",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("139fcb97-bd85-4ee0-9849-cb77aeaa67da"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "phamnhung@gmail.com",
                            FirstName = "Pham",
                            LastName = "Nhung K",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("2a9ffb7d-89fd-4784-b7eb-1a1245d30ae6"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "doviet@gmail.com",
                            FirstName = "Do",
                            LastName = "Viet L",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("5afbead9-e4a2-4e34-8eb9-ec9989ac31b5"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "leminh@gmail.com",
                            FirstName = "Le",
                            LastName = "Minh M",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("8ad18a18-2e0a-44a3-8898-ff2da1e6e6a4"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "dangquan@gmail.com",
                            FirstName = "Dang",
                            LastName = "Quan N",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("995dd243-3d72-44fc-b8f6-dfe9b1f4abaf"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "buihieu@gmail.com",
                            FirstName = "Bui",
                            LastName = "Hieu O",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "truonganh@gmail.com",
                            FirstName = "Truong",
                            LastName = "Anh P",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("cb00a417-417f-4d69-9ad1-e9c04e4f3d11"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "danghoa@gmail.com",
                            FirstName = "Dang",
                            LastName = "Hoa Q",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("deb20833-0427-4520-b0b9-2916b5d42d91"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "ngothanh@gmail.com",
                            FirstName = "Ngo",
                            LastName = "Thanh R",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("1b8df37b-80cf-4182-8cc9-12de166b46e2"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "phuocnam@gmail.com",
                            FirstName = "Phuoc",
                            LastName = "Nam S",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("237b98a8-9d2c-4dd7-8058-06a7c4909a6d"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "lehong@gmail.com",
                            FirstName = "Le",
                            LastName = "Hong T",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("c876965b-b849-4f4b-b1ae-4c78e5f9b3df"),
                            CreatedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Email = "nguyenanh@gmail.com",
                            FirstName = "Nguyen",
                            LastName = "Anh U",
                            ModifiedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1730),
                            Password = "123456",
                            Role = 2
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserCardStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("MasteryScore")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TimeSpent")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCardStatistic");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLearningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MasteryScore")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<long?>("TimeSpent")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClasses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1970),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1971),
                            MasteryScore = 2,
                            Role = 1,
                            TimeSpent = 320L,
                            UserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59")
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1973),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1973),
                            MasteryScore = 1,
                            Role = 2,
                            TimeSpent = 275L,
                            UserId = new Guid("b2e1073e-5c78-4bbf-9a23-0d3a799a4f81")
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1975),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1975),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 150L,
                            UserId = new Guid("d5c1b63d-cd34-47a6-9d18-9b0c5e457d2f")
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1976),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1977),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 480L,
                            UserId = new Guid("9b12349d-16b4-43fc-945c-b1632f0bcbb1")
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1978),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1979),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 200L,
                            UserId = new Guid("f12b876c-0e2d-4d39-b878-4d5b45e93557")
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1980),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1981),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 360L,
                            UserId = new Guid("22c115dd-c912-4fb2-8d57-037d89e4b5e4")
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1982),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1982),
                            MasteryScore = 1,
                            Role = 2,
                            TimeSpent = 110L,
                            UserId = new Guid("5e5a20e3-3a49-48fc-8e7a-14d476403e94")
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 1,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1984),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1984),
                            MasteryScore = 4,
                            Role = 2,
                            TimeSpent = 430L,
                            UserId = new Guid("ff127b02-7f94-4ebd-8d99-91e69f4ab6ba")
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1985),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1986),
                            MasteryScore = 5,
                            Role = 1,
                            TimeSpent = 120L,
                            UserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c")
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1987),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1988),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 290L,
                            UserId = new Guid("f8d170a5-02f7-4ff4-8c12-4eb83451fcd6")
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1989),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1989),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 240L,
                            UserId = new Guid("7d3e98b2-8825-476e-b230-63a7d8d6500b")
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1990),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1991),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 310L,
                            UserId = new Guid("139fcb97-bd85-4ee0-9849-cb77aeaa67da")
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1992),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1992),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 405L,
                            UserId = new Guid("2a9ffb7d-89fd-4784-b7eb-1a1245d30ae6")
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1993),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(1994),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 500L,
                            UserId = new Guid("5afbead9-e4a2-4e34-8eb9-ec9989ac31b5")
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2009),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2010),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 370L,
                            UserId = new Guid("8ad18a18-2e0a-44a3-8898-ff2da1e6e6a4")
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 2,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2012),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2012),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 180L,
                            UserId = new Guid("995dd243-3d72-44fc-b8f6-dfe9b1f4abaf")
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2014),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2015),
                            MasteryScore = 5,
                            Role = 1,
                            TimeSpent = 300L,
                            UserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e")
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2016),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2016),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 110L,
                            UserId = new Guid("cb00a417-417f-4d69-9ad1-e9c04e4f3d11")
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2017),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2018),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 410L,
                            UserId = new Guid("deb20833-0427-4520-b0b9-2916b5d42d91")
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2019),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2020),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 450L,
                            UserId = new Guid("1b8df37b-80cf-4182-8cc9-12de166b46e2")
                        },
                        new
                        {
                            Id = 21,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2021),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2021),
                            MasteryScore = 5,
                            Role = 2,
                            TimeSpent = 215L,
                            UserId = new Guid("237b98a8-9d2c-4dd7-8058-06a7c4909a6d")
                        },
                        new
                        {
                            Id = 22,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2023),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2023),
                            MasteryScore = 2,
                            Role = 2,
                            TimeSpent = 170L,
                            UserId = new Guid("c876965b-b849-4f4b-b1ae-4c78e5f9b3df")
                        },
                        new
                        {
                            Id = 23,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2024),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2025),
                            MasteryScore = 4,
                            Role = 2,
                            TimeSpent = 275L,
                            UserId = new Guid("7d3e98b2-8825-476e-b230-63a7d8d6500b")
                        },
                        new
                        {
                            Id = 24,
                            ClassId = 3,
                            JoinedDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2026),
                            LastLearningDate = new DateTime(2024, 10, 30, 10, 29, 53, 958, DateTimeKind.Local).AddTicks(2027),
                            MasteryScore = 4,
                            Role = 2,
                            TimeSpent = 350L,
                            UserId = new Guid("f8d170a5-02f7-4ff4-8c12-4eb83451fcd6")
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserDeckStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int?>("MasteryScore")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TimeSpent")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeckStatistic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = 30,
                            DeckId = 1,
                            MasteryScore = 5,
                            Month = 10,
                            Note = "Completed all sections.",
                            TimeSpent = 120L,
                            UserId = new Guid("4b6519a1-21ae-44b7-874a-0da82c60ad59"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            Day = 30,
                            DeckId = 1,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Struggled with some concepts.",
                            TimeSpent = 150L,
                            UserId = new Guid("b2e1073e-5c78-4bbf-9a23-0d3a799a4f81"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            Day = 30,
                            DeckId = 1,
                            MasteryScore = 3,
                            Month = 10,
                            Note = "Basic understanding.",
                            TimeSpent = 180L,
                            UserId = new Guid("d5c1b63d-cd34-47a6-9d18-9b0c5e457d2f"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            Day = 30,
                            DeckId = 2,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Learned some advanced patterns.",
                            TimeSpent = 200L,
                            UserId = new Guid("9b12349d-16b4-43fc-945c-b1632f0bcbb1"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            Day = 30,
                            DeckId = 2,
                            MasteryScore = 2,
                            Month = 10,
                            Note = "Need more practice.",
                            TimeSpent = 220L,
                            UserId = new Guid("f12b876c-0e2d-4d39-b878-4d5b45e93557"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 6,
                            Day = 30,
                            DeckId = 2,
                            MasteryScore = 1,
                            Month = 10,
                            Note = "Very confused about the concepts.",
                            TimeSpent = 260L,
                            UserId = new Guid("22c115dd-c912-4fb2-8d57-037d89e4b5e4"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Day = 30,
                            DeckId = 2,
                            MasteryScore = 3,
                            Month = 10,
                            Note = "Moderate understanding.",
                            TimeSpent = 230L,
                            UserId = new Guid("5e5a20e3-3a49-48fc-8e7a-14d476403e94"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Day = 30,
                            DeckId = 2,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Good grasp on the subject.",
                            TimeSpent = 210L,
                            UserId = new Guid("ff127b02-7f94-4ebd-8d99-91e69f4ab6ba"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Day = 30,
                            DeckId = 3,
                            MasteryScore = 5,
                            Month = 10,
                            Note = "Mastered the fundamentals.",
                            TimeSpent = 140L,
                            UserId = new Guid("3d1f9f41-8ac9-4c36-b85f-bcbe68d0f58c"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Day = 30,
                            DeckId = 3,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Good understanding of routing.",
                            TimeSpent = 160L,
                            UserId = new Guid("f8d170a5-02f7-4ff4-8c12-4eb83451fcd6"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            Day = 30,
                            DeckId = 3,
                            MasteryScore = 3,
                            Month = 10,
                            Note = "Basic grasp of middleware.",
                            TimeSpent = 180L,
                            UserId = new Guid("7d3e98b2-8825-476e-b230-63a7d8d6500b"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            Day = 30,
                            DeckId = 4,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Successfully built an API.",
                            TimeSpent = 190L,
                            UserId = new Guid("139fcb97-bd85-4ee0-9849-cb77aeaa67da"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Day = 30,
                            DeckId = 4,
                            MasteryScore = 2,
                            Month = 10,
                            Note = "Still learning the API concepts.",
                            TimeSpent = 210L,
                            UserId = new Guid("2a9ffb7d-89fd-4784-b7eb-1a1245d30ae6"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            Day = 30,
                            DeckId = 4,
                            MasteryScore = 1,
                            Month = 10,
                            Note = "Completely lost on this.",
                            TimeSpent = 220L,
                            UserId = new Guid("5afbead9-e4a2-4e34-8eb9-ec9989ac31b5"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            Day = 30,
                            DeckId = 4,
                            MasteryScore = 3,
                            Month = 10,
                            Note = "Moderate understanding.",
                            TimeSpent = 200L,
                            UserId = new Guid("8ad18a18-2e0a-44a3-8898-ff2da1e6e6a4"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 16,
                            Day = 30,
                            DeckId = 4,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Good grasp on API building.",
                            TimeSpent = 230L,
                            UserId = new Guid("995dd243-3d72-44fc-b8f6-dfe9b1f4abaf"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            Day = 30,
                            DeckId = 5,
                            MasteryScore = 5,
                            Month = 10,
                            Note = "Perfectly understood the utility-first approach.",
                            TimeSpent = 130L,
                            UserId = new Guid("bb7be635-3f9e-4af2-96d1-f232a717b39e"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 18,
                            Day = 30,
                            DeckId = 5,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Nice introduction to TailwindCSS.",
                            TimeSpent = 150L,
                            UserId = new Guid("cb00a417-417f-4d69-9ad1-e9c04e4f3d11"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Day = 30,
                            DeckId = 5,
                            MasteryScore = 3,
                            Month = 10,
                            Note = "Need to work more on customization.",
                            TimeSpent = 170L,
                            UserId = new Guid("deb20833-0427-4520-b0b9-2916b5d42d91"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Day = 30,
                            DeckId = 6,
                            MasteryScore = 4,
                            Month = 10,
                            Note = "Good start with the framework.",
                            TimeSpent = 190L,
                            UserId = new Guid("1b8df37b-80cf-4182-8cc9-12de166b46e2"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 21,
                            Day = 30,
                            DeckId = 6,
                            MasteryScore = 2,
                            Month = 10,
                            Note = "Struggled with understanding the utility classes.",
                            TimeSpent = 210L,
                            UserId = new Guid("237b98a8-9d2c-4dd7-8058-06a7c4909a6d"),
                            Year = 2024
                        },
                        new
                        {
                            Id = 22,
                            Day = 30,
                            DeckId = 6,
                            MasteryScore = 1,
                            Month = 10,
                            Note = "Completely lost in the initial stages.",
                            TimeSpent = 220L,
                            UserId = new Guid("c876965b-b849-4f4b-b1ae-4c78e5f9b3df"),
                            Year = 2024
                        });
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Card", b =>
                {
                    b.HasOne("rmbh.Entity.Entities.Manipulation.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Deck", b =>
                {
                    b.HasOne("rmbh.Entity.Entities.Manipulation.Class", "Class")
                        .WithMany("Decks")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserCardStatistic", b =>
                {
                    b.HasOne("rmbh.Entity.Entities.Manipulation.Card", "Card")
                        .WithMany("UserCardStatistics")
                        .HasForeignKey("CardId");

                    b.HasOne("rmbh.Entity.Entities.Manipulation.User", "User")
                        .WithMany("UserCardStatistics")
                        .HasForeignKey("UserId");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserClass", b =>
                {
                    b.HasOne("rmbh.Entity.Entities.Manipulation.Class", "Class")
                        .WithMany("UserClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rmbh.Entity.Entities.Manipulation.User", "User")
                        .WithMany("UserClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.UserDeckStatistic", b =>
                {
                    b.HasOne("rmbh.Entity.Entities.Manipulation.Deck", "Deck")
                        .WithMany("UserDeckStatistics")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rmbh.Entity.Entities.Manipulation.User", "User")
                        .WithMany("UserDeckStatistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Card", b =>
                {
                    b.Navigation("UserCardStatistics");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Class", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("UserClasses");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.Deck", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("UserDeckStatistics");
                });

            modelBuilder.Entity("rmbh.Entity.Entities.Manipulation.User", b =>
                {
                    b.Navigation("UserCardStatistics");

                    b.Navigation("UserClasses");

                    b.Navigation("UserDeckStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
